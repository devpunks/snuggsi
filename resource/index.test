
const
 { test, read, fetch }
    = require ('test')

, path = '/foo/'
, URL  = `http://localhost:8181${path}`


, { Server, Resource }
    = require ('..')

, route = resource =>
    require ('../middleware')
    .route  ( `${path}`, resource )

, DEFAULT_METHODS = ['GET', 'HEAD']

, METHODS = [ ... require ('http').METHODS ]
    // for some reason connect won't work
    .filter (method => method !== 'TRACE')
    .filter (method => method !== 'CONNECT')
    .filter (method => method !== 'OPTIONS') // cors?

, SAFE_METHODS = [ ... DEFAULT_METHODS ]

, UNSAFE_METHODS = METHODS.filter
    (method => !!! SAFE_METHODS.includes (method))

, unique = (method, index, methods) =>
    methods.indexOf (method) === index

, compare = (left, right) =>
  // headers in no particular order
    left.slice ().sort ().join `,`
      == right.slice ().sort ().join `,`


test ('Distribute media to CDN')
test ('Caching HTML, JSON, Javascript, and CSS')

test ('Default Resource allowed methods', async t => {
  const
    resource = Resource ``

  , server =
      (new Server ( [ route (resource) ] ))
      .serve ``

  , ALLOWED_METHODS = DEFAULT_METHODS

  for (method of ALLOWED_METHODS) {
    let { status, headers }
      = await fetch ( URL, { method } )

    t.ok ( [200, 404 /* for GET SMH */].includes (status) )
    t.notOk ( headers.get ('allow') )
  }

  server.close ``
  t.end ()
})


test ('Default Resource disallowed methods', async t => {
  const
    resource = Resource ``

  , server =
      (new Server ( [ route (resource) ] ))
      .serve ``

  , DISALLOWED_METHODS = METHODS.filter
    (method => !!! DEFAULT_METHODS.includes (method))


  for (method of DISALLOWED_METHODS) {

    let
      { status, headers }
        = await fetch ( URL, { method } )

    , allowed
        = headers.get ('allow').split `, `

    t.equals ( 405, status )
    t.ok ( compare (allowed, DEFAULT_METHODS) )
  }

  server.close ``
  t.end ()
})


test ('Defined Resource allowed methods', async t => {
  const
    { __proto__: proto } = resource
      = Resource `/resource/fixtures/`

  , server =
      (new Server ( [ route (resource) ] ))
      .serve ``

  , DEFINED_METHODS = Object
      .getOwnPropertyNames (Object.getPrototypeOf (proto))
      .map (method => method.toUpperCase ())


  , ALLOWED_METHODS
      = [ ... DEFAULT_METHODS, ... DEFINED_METHODS ]
        .filter (method => METHODS.includes (method))
        .filter (unique)


  for (method of ALLOWED_METHODS) {
    let
      { status, headers }
        = await fetch ( URL, { method } )

    t.notEqual ( 405, status )
    t.notOk ( headers.get ('allow') )
  }

  server.close ``
  t.end ()
})


test ('Defined Resource disallowed methods', async t => {
  const
    { __proto__: proto } = resource
      = Resource `/resource/fixtures/`

  , server =
      (new Server ( [ route (resource) ] ))
      .serve ``

  , DEFINED_METHODS = Object
      .getOwnPropertyNames (Object.getPrototypeOf (proto))
      .map (method => method.toUpperCase ())

  , ALLOWED_METHODS
      = [ ... DEFAULT_METHODS, ... DEFINED_METHODS ]
        .filter (method => METHODS.includes (method))
        .filter (unique)

  , DISALLOWED_METHODS = METHODS
      .filter (name => !!! ALLOWED_METHODS.includes (name))


  for (method of DISALLOWED_METHODS) {

    let
      { status, headers }
        = await fetch ( URL, { method } )

    , allowed
        = headers.get ('allow').split `, `

    t.equal ( 405, status )
    t.ok ( compare (allowed, ALLOWED_METHODS) )
  }

  server.close ``
  t.end ()
})

test ('GET default subresource Accept: text/html', async t => {

  const
    point = `/resource/fixtures/`
  , resource = Resource (point)

  , server =
      (new Server ( [ route (resource) ] ))
      .serve ``

  , expected = await read
      ( `.${point}index.html` )

  , response = await fetch
      ( `${URL}`, { headers : { 'Accept' : 'text/html' } } )

  , { status, headers } = response

  , type     = headers.get ('Content-Type')
  , length   = headers.get ('Content-Length')
  , modified = headers.get ('Last-Modified')


  t.equal ( expected, await response.text `` )
  t.equal (type, 'text/html; charset=utf-8')
  t.ok (length == expected.length)
  t.equal ( 200, status )
  t.ok (modified)


  server.close ``
  t.end ()
})


test ('GET subresource assets', async t => {

  const
    point = `/resource/fixtures/`
  , resource = Resource (point)

  , assets // loop resource
      = ['index.html']

  , server =
      (new Server ( [ route (resource) ] ))
      .serve ``

  for (asset of assets) {

    let
      expected = await read
        ( `.${point}${asset}` )

    , response = await fetch
        ( `${URL}${asset}` )

    , { status, headers } = response

    , type     = headers.get ('Content-Type')
    , length   = headers.get ('Content-Length')
    , modified = headers.get ('Last-Modified')


    t.equal ( expected, await response.text `` )
    t.equal (type, 'text/html; charset=utf-8')
    t.ok (length == expected.length)
    t.equal ( 200, status )
    t.ok (modified)
  }

  server.close ``
  t.end ()
})


test ('Deny GET */index.es subresource', async t => {

  const
    point = `/resource/fixtures/`
  , resource = Resource (point)

  , server =
      (new Server ( [ route (resource) ] ))
      .serve ``

  , response = await fetch
      ( `${URL}index.es` )

  , { status } = response


  t.equal ( 404, status )


  server.close ``
  t.end ()
})


test ('GET subresource with predefined body', async t => {

  const
    resource = Resource `/resource/fixtures/`

  , server =
      (new Server ( [ route (resource) ] ))
      .serve ``

  , response = await fetch
      ( `${URL}ping` )

  , { status, headers } = response


  t.equal ( 200, status )
  t.equal ( 'pong', await response.text `` )

  server.close ``
  t.end ()
})
