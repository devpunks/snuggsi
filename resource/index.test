const
  path = '/foo/'
, URL  = `http://localhost:8181${path}`

, { test, read, fetch }
    = require ('test')

, { Server, Resource }
    = require ('..')

, route = resource =>
    require ('../middleware')
    .route  ( `${path}{id}`, resource )

, DEFAULT_METHODS = [ 'GET', 'HEAD'  ]

, METHODS = [ ... require ('http').METHODS ]

, SAFE_METHODS = ['OPTIONS', ... DEFAULT_METHODS ]

, UNSAFE_METHODS = METHODS.filter
    (method => !!! SAFE_METHODS.includes (method))

, unique = (method, index, methods) =>
    methods.indexOf (method) === index


test ('Default Resource allowed methods', async t => {
  const
    resource = Resource ``

  , server =
      (new Server ( [ route (resource) ] ))
      .serve ``

  for (method of SAFE_METHODS) {
    let { status, headers }
      = await fetch ( `${URL}14`, { method } )

    t.notOk ('allow' in headers)
    t.ok ( [200,204].includes (status) )
  }

  server.close ``
  t.end ()
})


test ('Default Resource disallowed methods', async t => {
  const
    resource = Resource ``

  , server =
      (new Server ( [ route (resource) ] ))
      .serve ``


  for (method of UNSAFE_METHODS.filter (message => message !== 'CONNECT')) {

    let { status, headers }
      = await fetch ( `${URL}14`, { method } )

    t.equals ( DEFAULT_METHODS.join `, `, headers.get ('allow') )
    t.equals ( 405, status )
  }

  server.close ``
  t.end ()
})


test ('Defined Resource allowed methods', async t => {
  const
    resource = Resource `server/fixtures`

  , server =
      (new Server ( [ route (resource) ] ))
      .serve ``

  , DEFINED_METHODS
      = Object.getOwnPropertyNames
        (require ('server/fixtures/index.es').prototype)
      .filter (name => METHODS.includes (name.toUpperCase ()))


  for (method of DEFINED_METHODS) {
    let { status, headers }
      = await fetch ( `${URL}14`, { method } )

    t.notEqual ( DEFAULT_METHODS.join `, `, headers.get ('allow') )
    t.notEqual ( 405, status )
  }

  server.close ``
  t.end ()
})


test.only ('Defined Resource disallowed methods', async t => {
  const
    resource = Resource `server/fixtures`

  , server =
      (new Server ( [ route (resource) ] ))
      .serve ``

  , DEFINED_METHODS
      = Object.getOwnPropertyNames
        (require ('server/fixtures/index.es').prototype)
      .map (method => method.toUpperCase ())

  , allow = [ ... DEFAULT_METHODS, ... DEFINED_METHODS ]
      .filter (method => METHODS.includes (method))
      .filter (unique)

  , wtf = METHODS
      .filter (message => message !== 'CONNECT')
      // why the heck do we have to do this janky shit ?
      .filter (message => message !== 'OPTIONS')
      .filter (name => !!! allow.includes (name))


  for (method of wtf) {
    let { status, headers }
      = await fetch ( `${URL}14`, { method } )

    t.ok
      ( allow.every (method =>  headers._headers ['allow'][0].includes (method) ) )

    t.equal ( 405, status )
  }

  server.close ``
  t.end ()
})
