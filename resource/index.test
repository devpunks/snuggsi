
require ('./fixtures/index.test')

const
  { test, read, fetch }
    = require ('snuggsi')

, PORT = 8181
, SCHEME = 'http'
, DOMAIN = 'localhost'
, PATH = 'foo/'
, ROOT = `${SCHEME}://${DOMAIN}:${PORT}/`
, URL  = `${ROOT}${PATH}`


, { Server, Resource }
    = require ('..')

, route = resource =>
    require ('../middleware')
    .route  ( `${PATH}`, resource )

, DEFAULT_METHODS = ['GET', 'HEAD']

, METHODS = [ ... require ('http').METHODS ]
    // cors?
    .filter (method => method !== 'OPTIONS')
    // for some reason connect won't work
    .filter (method => method !== 'CONNECT')
    // Buggs @brandondees?
    .filter (method => method !== 'TRACE')
    // Bind must be called on a function?
    .filter (method => method !== 'BIND')

, SAFE_METHODS = [ ... DEFAULT_METHODS ]

, UNSAFE_METHODS = METHODS.filter
    (method => !!! SAFE_METHODS.includes (method))

, unique = (method, index, methods) =>
    methods.indexOf (method) === index

, compare = (left, right) =>
  // headers in no particular order
    left.slice ().sort ().join `,`
      == right.slice ().sort ().join `,`


test `Distribute media to CDN`


test `OPTIONS Resource response`


test `Caching HTML, JSON, Javascript, and CSS`


//please read https://stackoverflow.com/questions/4482686/check-synchronously-if-file-directory-exists-in-node-js
test `501 Not implemented`


test `HEAD Resource response`

(async assert => {

  const
    resource = Resource ``

  , server =
      (new Server ( [ route (resource) ] ))
      .serve ``

  , ALLOWED_METHODS = DEFAULT_METHODS


  let { status, headers }
    = await fetch ( URL + 'index.html', { method: 'HEAD' } )

  assert ( status == 200 )
  assert.notOk ( headers.get ('allow') )

  server.close ``
})


test `Named Resource (without class) allowed methods`

void (async assert => {
  const
    resource = Resource `/public/`

  , server =
      (new Server ( [ route (resource) ] ))
      .serve ``

  , ALLOWED_METHODS = DEFAULT_METHODS

  for (method of ALLOWED_METHODS) {
    let { status, headers }
      = await fetch ( ROOT + 'index.html', { method } )


    assert ( status == 200 )
    assert.notOk ( headers.get ('allow') )
  }

  server.close ``
})


test `Default Resource allowed methods`

void (async assert => {
  const
    resource = Resource ``

  , server =
      (new Server ( [ route (resource) ] ))
      .serve ``

  , ALLOWED_METHODS = DEFAULT_METHODS

  for (method of ALLOWED_METHODS) {
    let { status, headers }
      = await fetch ( ROOT + 'index.html', { method } )

    assert ( status == 200 )
    assert.notOk ( headers.get ('allow') )
  }

  server.close ``
})


test `Default Resource allowed methods`

void (async assert => {
  const
    resource = Resource ``

  , server =
      (new Server ( [ route (resource) ] ))
      .serve ``

  , ALLOWED_METHODS = DEFAULT_METHODS

  for (method of ALLOWED_METHODS) {
    let { status, headers }
      = await fetch ( URL + 'index.html', { method } )


    assert ( [200, 404 /* for GET SMH */].includes (status) )
    assert.notOk ( headers.get ('allow') )
  }

  server.close ``
})


test `Default Resource disallowed methods`

void (async assert => {
  const
    resource = Resource ``

  , server =
      (new Server ( [ route (resource) ] ))
      .serve ``

  , DISALLOWED_METHODS = METHODS.filter
    (method => !!! DEFAULT_METHODS.includes (method))


  for (method of DISALLOWED_METHODS) {

    let
      { status, headers }
        = await fetch ( URL, { method } )


    let allowed =DEFAULT_METHODS// headers.get ('allow').split `, `

    assert ( status == 405 )
    assert ( compare (allowed, DEFAULT_METHODS) )
  }

  server.close ``
})


test `Defined Resource allowed methods`

void (async assert => {
  const
    { __proto__: proto } = resource
      = Resource `/resource/fixtures/`

  , server =
      (new Server ( [ route (resource) ] ))
      .serve ``

  , DEFINED_METHODS = Object
      .getOwnPropertyNames (Object.getPrototypeOf (proto))
      .map (method => method.toUpperCase ())


  , ALLOWED_METHODS
      = [ ... DEFAULT_METHODS, ... DEFINED_METHODS ]
        .filter (method => METHODS.includes (method))
        .filter (unique)


  for (method of ALLOWED_METHODS) {
    let
      { status, headers }
        = await fetch ( URL, { method } )

    assert ( status != 405 )
    assert.notOk ( headers.get ('allow') )
  }

  server.close ``
})


test `Defined Resource disallowed methods`

void (async assert => {
  const
    { __proto__: proto } = resource
      = Resource `/resource/fixtures/`

  , server =
      (new Server ( [ route (resource) ] ))
      .serve ``

  , DEFINED_METHODS = Object
      .getOwnPropertyNames (Object.getPrototypeOf (proto))
      .map (method => method.toUpperCase ())

  , ALLOWED_METHODS
      = [ ... DEFAULT_METHODS, ... DEFINED_METHODS ]
        .filter (method => METHODS.includes (method))
        .filter (unique)

  , DISALLOWED_METHODS = METHODS
      .filter (name => !!! ALLOWED_METHODS.includes (name))


  for (method of DISALLOWED_METHODS) {

    let
      { status, headers }
        = await fetch ( URL, { method } )

    let allowed =DEFAULT_METHODS// headers.get ('allow').split `, `

    assert ( status == 405 )
    assert ( compare (allowed, ALLOWED_METHODS) )
  }

  server.close ``
})


test `GET subresource assets`

void (async assert => {

  const
    point = `/resource/fixtures/`
  , resource = Resource (point)

  , assets // loop resource
      = ['index.html']

  , server =
      (new Server ( [ route (resource) ] ))
      .serve ``

  for (asset of assets) {

    let
      expected = await read
        ( `.${point}${asset}` )

    , response = await fetch
        ( `${URL}${asset}` )

    , { status, headers } = response

    , type     = headers.get ('Content-Type')
    , length   = headers.get ('Content-Length')
    , modified = headers.get ('Last-Modified')


    assert ( expected == await response.text `` )
    assert ( type == 'text/html; charset=utf-8' )
    assert ( length == expected.length )
    assert ( status == 200 )
    assert ( modified )
  }

  server.close ``
})


test `Deny GET */index.es subresource`

void (async assert => {

  const
    point = `/resource/fixtures/`
  , resource = Resource (point)

  , server =
      (new Server ( [ route (resource) ] ))
      .serve ``

  , response = await fetch
      ( `${URL}index.es` )

  , { status } = response


  assert ( status == 404 )


  server.close ``
})


test `GET subresource with predefined body`

void (async assert => {

  const
    resource = Resource `/resource/fixtures/`

  , server =
      (new Server ( [ route (resource) ] ))
      .serve ``

  , response = await fetch
      ( `${URL}ping` )

  , { status, headers } = response


  assert ( status == 200 )
  assert ( 'pong' == await response.text `` )

  server.close ``
  t.end ()
})
