const
  path = '/foo/'
, URI  = `http://localhost:8181${path}`
, { route } = require ('middleware')
, { Server, Resource } = require ('..')
, middleware = route (path, Resource `/resource/fixtures/`)
, { test, serve, read, fetch } = require ('test')


test ('Resource TXT GET / Accept: text/plain', async t => {

  const
    accept    = 'text/plain'
  , charset   = 'charset=utf-8'
  , server    = (new Server ([ middleware ])).serve ``
  , expected  = read ('resource/fixtures/index.txt')
  , options   = {
      compress : false
    , headers  : { accept } }
  , response = await fetch (URI, options)
  , { status, headers } = response
  , type = headers.get ('content-type')
  , length   = headers.get ('Content-Length')
  , modified = headers.get ('Last-Modified')


  t.ok (modified)
  t.equal ( status, 200 )
  t.ok (type.match (accept))
  t.ok (type.match (charset))
  t.ok (length == expected.length)
  t.equal ( expected, await response.text `` )

  server.close ``
  t.end ()
})


test ('Resource HTML GET / Accept: text/html', async t => {

  const
    accept    = 'text/html'
  , charset   = 'charset=utf-8'
  , server    = (new Server ([ middleware ])).serve ``
  , expected  = read (`resource/fixtures/index.html`)
  , options   = {
      compress : false
    , headers  : { accept } }
  , response = await fetch (URI, options)
  , { status, headers } = response
  , type = headers.get ('content-type')
  , length   = headers.get ('Content-Length')
  , modified = headers.get ('Last-Modified')


  t.ok (modified)
  t.equal ( status, 200 )
  t.ok (type.match (accept))
  t.ok (type.match (charset))
  t.ok (length == expected.length)
  t.equal ( expected, await response.text `` )

  server.close ``
  t.end ()
})


test ('Resource CSS GET / Accept: text/css', async t => {

  const
    accept    = 'text/css'
  , charset   = 'charset=utf-8'
  , server    = (new Server ([ middleware ])).serve ``
  , expected  = read (`resource/fixtures/index.css`)
  , options   = {
      compress : false
    , headers  : { accept } }
  , response = await fetch (URI, options)
  , { status, headers } = response
  , type = headers.get ('content-type')
  , length   = headers.get ('Content-Length')
  , modified = headers.get ('Last-Modified')


  t.ok (modified)
  t.equal ( status, 200 )
  t.ok (type.match (accept))
  t.ok (type.match (charset))
  t.ok (length == expected.length)
  t.equal ( expected, await response.text `` )

  server.close ``
  t.end ()
})


test ('Resource JSON GET / Accept: application/json', async t => {

  const
    accept    = 'application/json'
  , charset   = 'charset=utf-8'
  , server    = (new Server ([ middleware ])).serve ``
  , expected  = read (`resource/fixtures/index.json`)
  , options   = {
      compress : false
    , headers  : { accept } }
  , response = await fetch (URI, options)
  , { status, headers } = response
  , type = headers.get ('content-type')
  , length   = headers.get ('Content-Length')
  , modified = headers.get ('Last-Modified')


  t.ok (modified)
  t.equal ( status, 200 )
  t.ok (type.match (accept))
  t.ok (type.match (charset))
  t.ok (length == expected.length)
  t.equal ( expected, await response.text `` )

  server.close ``
  t.end ()
})


test ('Resource JS GET / Accept: application/javascript', async t => {

  const
    accept    = 'application/javascript'
  , charset   = 'charset=utf-8'
  , server    = (new Server ([ middleware ])).serve ``
  , expected  = read (`resource/fixtures/index.js`)
  , options   = {
      compress : false
    , headers  : { accept } }
  , response = await fetch (URI, options)
  , { status, headers } = response
  , type = headers.get ('content-type')
  , length   = headers.get ('Content-Length')
  , modified = headers.get ('Last-Modified')


  t.ok (modified)
  t.equal ( status, 200 )
  t.ok (type.match (accept))
  t.ok (type.match (charset))
  t.ok (length == expected.length)
  t.equal ( expected, await response.text `` )

  server.close ``
  t.end ()
})
