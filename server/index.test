require ('./mount.test')

const
  { test, read, fetch }
    = require ('test')

, { Server }
    = require ('..')


test ('new Server does not throw', t => {

  t.doesNotThrow ( _ => new Server )

  t.end ()
})


test ('closing server', t => {

  const
    server
      = ( new Server ).serve ``


  t.ok ( server.close () )

  t.end ()
})


test ('closing server by calling with backticks', t => {

  const
    server
      = ( new Server ).serve ``


  t.ok ( server.close `` )

  t.end ()
})


test.only ('middleware collection dependency injection', async t => {

  const
    middleware
      = context => context.body = 'Hello World'

  , stack = [ middleware ]

    server
      = ( new Server ( stack ) ).serve `server/fixtures`

  , response
      = await fetch (`http://localhost:${process.env.PORT}/`)


  t.equal
    ( await response.text (), 'Hello World' )

  server.close ``
  t.end ()
})


test ('serve defaults to `public` when called without argument', async t => {

  const
    server
      = ( new Server ).serve ()

  , { body }
      = await fetch (`http://localhost:${process.env.PORT}/favicon.ico`)


  t.equal
    ( await read (body), read `./public/favicon.ico` )

  server.close ``
  t.end ()
})


test ('serve defaults to `public` when called with empty template literal', async t => {

  const
    server
      = ( new Server ).serve ``

  , { body }
      = await fetch (`http://localhost:${process.env.PORT}/favicon.ico`)


  t.equal
    ( await read (body), read `./public/favicon.ico` )

  server.close ``
  t.end ()
})


test ('serving specific directory', async t => {

  const
    server
      = ( new Server ).serve ('server/fixtures')

  , { body }
      = await fetch (`http://localhost:${process.env.PORT}/index.txt`)


  t.equal
    ( await read (body), read `./server/fixtures/index.txt` )

  server.close ``
  t.end ()
})


test ('serving specific directory with template literal', async t => {

  const
    server
      = ( new Server ).serve `server/fixtures`

  , { body }
      = await fetch (`http://localhost:${process.env.PORT}/index.txt`)


  t.equal
    ( await read (body), read `./server/fixtures/index.txt` )

  server.close ``
  t.end ()
})
