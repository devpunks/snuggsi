const
  { test, serve, read, fetch }
    = require ('test')


test ('calling next middlewaree')


test ('GET /snuggsi?debug', async t => {

  const
    server = serve ``
  , body   = read `dist/snuggsi.js`

  , options
      = { compress: false }

  , response
      = await fetch ('http://localhost:8181/snuggsi?debug', options)

  , type
      = response.headers.get ('content-type')


  t.notOk (response.headers.get ('content-encoding'))
  t.ok (type.match (/application\/javascript/))
  t.ok (type.match (/charset=utf-8/))
  t.equal ( await read (response.body), body )

  server.close ``
  t.end ()
})


test ('GET /snuggsi?debug Accept-Encoding: identity', async t => {

  const
    server = serve ``
  , body   = read `dist/snuggsi.js`

  , options
      = { compress: false , headers: { 'Accept-Encoding' : 'identity' } }

  , response
      = await fetch ('http://localhost:8181/snuggsi?debug', options)

  , type
      = response.headers.get ('content-type')


  t.notOk (response.headers.get ('content-encoding'))
  t.ok (type.match (/application\/javascript/))
  t.ok (type.match (/charset=utf-8/))
  t.equal ( await read (response.body), body )

  server.close ``
  t.end ()
})


test ('GET /snuggsi?debug Accept-Encoding: gzip', async t => {

  const
    server = serve ``
  , body   = read `dist/snuggsi.js`

  , options
      = { compress: false , headers: { 'Accept-Encoding' : 'gzip' } }

  , response
      = await fetch ('http://localhost:8181/snuggsi?debug', options)

  , type
      = response.headers.get ('content-type')


  t.ok (type.match (/charset=utf-8/))
  t.ok (type.match (/application\/javascript/))
  t.equal ( await read (response.body), body )

  t.notOk (response.headers.get ('content-encoding'))

  server.close ``
  t.end ()
})


test ('GET /snuggsi?debug Accept-Encoding: br', async t => {

  const
    server = serve ``
  , body   = read `dist/snuggsi.es`

  , options
      = { compress: false , headers: { 'Accept-Encoding' : 'br' } }

  , response
      = await fetch ('http://localhost:8181/snuggsi?debug', options)

  , type
      = response.headers.get ('content-type')


  t.ok (type.match (/charset=utf-8/))
  t.ok (type.match (/application\/ecmascript/))
  t.equal ( await read (response.body), body )

  t.notOk (response.headers.get ('content-encoding'))

  server.close ``
  t.end ()
})


test ('GET /snuggsi', async t => {

  const
    server = serve ``
  , body   = read `dist/snuggsi.js`

  , options
      = { compress: false }

  , response
      = await fetch ('http://localhost:8181/snuggsi', options)

  , type
      = response.headers.get ('content-type')


  t.ok (type.match (/charset=utf-8/))
  t.ok (type.match (/application\/javascript/))
  t.equal ( await read (response.body), body )

  t.notOk (response.headers.get ('content-encoding'))

  server.close ``
  t.end ()
})


test ('GET /snuggsi Accept-Encoding: identity', async t => {

  const
    server = serve ``
  , body   = read `dist/snuggsi.js`

  , options
      = { compress: false , headers: { 'Accept-Encoding' : 'identity' } }

  , response
      = await fetch ('http://localhost:8181/snuggsi', options)

  , type
      = response.headers.get ('content-type')


  t.ok (type.match (/charset=utf-8/))
  t.ok (type.match (/application\/javascript/))
  t.equal ( await read (response.body), body )

  t.notOk (response.headers.get ('content-encoding'))

  server.close ``
  t.end ()
})


test ('GET /snuggsi Accept-Encoding: *', async t => {

  const
    server = serve ``
  , body   = read `dist/snuggsi.min.js.gz`

  , options
      = { compress: false , headers: { 'Accept-Encoding' : '*' } }

  , response
      = await fetch ('http://localhost:8181/snuggsi', options)

  , type
      = response.headers.get ('content-type')


  t.ok (type.match (/charset=utf-8/))
  t.ok (type.match (/application\/javascript/))
  t.equal ( await read (response.body), body )
  t.equal ( response.headers.get ('content-encoding'), 'gzip' )

  server.close ``
  t.end ()
})


test ('GET /snuggsi Accept-Encoding: gzip', async t => {

  const
    server = serve ``
  , body   = read `dist/snuggsi.min.js.gz`

  , options
      = { compress: false , headers: { 'Accept-Encoding' : 'gzip' } }

  , response
      = await fetch ('http://localhost:8181/snuggsi', options)

  , type
      = response.headers.get ('content-type')


  t.ok (type.match (/charset=utf-8/))
  t.ok (type.match (/application\/javascript/))
  t.equal ( await read (response.body), body )
  t.equal ( response.headers.get ('content-encoding'), 'gzip' )

  server.close ``
  t.end ()
})


test ('GET /snuggsi Accept-Encoding: br', async t => {

  const
    server = serve ``
  , body   = read `dist/snuggsi.min.es.br`

  , options
      = { compress: false , headers: { 'Accept-Encoding' : 'br' } }

  , response
      = await fetch ('http://localhost:8181/snuggsi', options)

  , type
      = response.headers.get ('content-type')


  t.ok (type.match (/charset=utf-8/))
  t.ok (type.match (/application\/ecmascript/))
  t.equal ( await read (response.body), body )
  t.equal ( response.headers.get ('content-encoding'), 'br' )

  server.close ``
  t.end ()
})


test ('GET /snuggsi.es', async t => {

  const
    server = serve ``
  , body   = read `dist/snuggsi.min.es.br`

  , options
      = { compress: false }

  , response
      = await fetch ('http://localhost:8181/snuggsi.es', options)

  , type
      = response.headers.get ('content-type')


  t.ok (type.match (/charset=utf-8/))
  t.ok (type.match (/application\/ecmascript/))
  t.equal ( await read (response.body), body )

  t.notOk (response.headers.get ('content-encoding'))

  server.close ``
  t.end ()
})


test ('GET /snuggsi.es?debug', async t => {

  const
    server = serve ``
  , body   = read `dist/snuggsi.es`

  , options
      = { compress: false }

  , response
      = await fetch ('http://localhost:8181/snuggsi.es?debug', options)

  , type
      = response.headers.get ('content-type')


  t.ok (type.match (/charset=utf-8/))
  t.ok (type.match (/application\/ecmascript/))
  t.equal ( await read (response.body), body )

  t.notOk (response.headers.get ('content-encoding'))

  server.close ``
  t.end ()
})


test ('GET /snuggsi.es Accept-Encoding: identity', async t => {

  const
    server = serve ``
  , body   = read `dist/snuggsi.es`

  , options
      = { compress: false , headers: { 'Accept-Encoding' : 'identity' } }

  , response
      = await fetch ('http://localhost:8181/snuggsi.es', options)

  , type
      = response.headers.get ('content-type')


  t.ok (type.match (/charset=utf-8/))
  t.ok (type.match (/application\/ecmascript/))
  t.equal ( await read (response.body), body )

  t.notOk (response.headers.get ('content-encoding'))

  server.close ``
  t.end ()
})


test ('GET /snuggsi.es Accept-Encoding: *', async t => {

  const
    server = serve ``
  , body   = read `dist/snuggsi.min.es.gz`

  , options
      = { compress: false , headers: { 'Accept-Encoding' : '*' } }

  , response
      = await fetch ('http://localhost:8181/snuggsi.es', options)

  , type
      = response.headers.get ('content-type')


  console.log (response.headers)

  t.ok (type.match (/charset=utf-8/))
  t.ok (type.match (/application\/ecmascript/))
  t.equal ( await read (response.body), body )
  t.equal ( response.headers.get ('content-encoding'), 'gzip' )

  server.close ``
  t.end ()
})


test.only ('GET /snuggsi.es Accept-Encoding: gzip', async t => {

  const
    server = serve ``
  , body   = read `dist/snuggsi.min.es.gz`

  , options
      = { compress: false , headers: { 'Accept-Encoding' : 'gzip' } }

  , response
      = await fetch ('http://localhost:8181/snuggsi.es', options)

  , type
      = response.headers.get ('content-type')


  console.log (response.headers)

  t.ok (type.match (/charset=utf-8/))
  t.ok (type.match (/application\/ecmascript/))
  t.equal ( await read (response.body), body )
  t.equal ( response.headers.get ('content-encoding'), 'gzip' )

  server.close ``
  t.end ()
})
