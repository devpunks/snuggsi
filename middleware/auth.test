const
  { test, browse, fetch }
    = require ('test')

, { Server }
    = require ('..')

, credentials
    = { name: 'Foo', password: 'Bar' }

, { auth }
    = require ('./')

, middleware
    = [ auth ( credentials ) ]


test ('calling next middlewaree')


// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/WWW-Authenticate
// WWW-Authenticate: Basic realm="Access to the staging site", charset="UTF-8"
test ('Basic auth with valid credentials responds 200 OK', async t => {

  const
    name     = 'Foo'
  , password = 'Bar'
  , expected = 'Access Granted'
  , echo     = context => context.body = expected
  , server   = (new Server ([ ... middleware, echo ])).serve ``
  , headers  = authorize (name, password)
  , response = await fetch
      ('http://localhost:8181/', { headers } )


  t.equal
    (response.status, 200)

  t.equal
    (await response.text ``, expected)


  server.close ``
  t.end ()
})


// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/WWW-Authenticate
// WWW-Authenticate: Basic realm="Access to the staging site", charset="UTF-8"
test ('Basic auth with valid credentials removes WWW-Authenticate', async t => {

  const
    name     = 'Foo'
  , password = 'Bar'
  , server   = (new Server (middleware)).serve ``
  , headers  = authorize (name, password)
  , response = await fetch
      ('http://localhost:8181/', { headers } )


  t.notEqual
    (response.headers.get ('www-authenticate'), 'Basic')

  server.close ``
  t.end ()
})


test ('invalid name denies access with 401 status code', async t => {

  const
    password = 'Bar'
  , name     = 'sasdgaregqgads'
  , headers  = authorize (name, password)
  , server   = (new Server (middleware)).serve ``

  , response = await fetch
      ('http://localhost:8181/', { headers } )


  t.equal (response.status, 401)

  server.close ``
  t.end ()
})


test ('invalid name denies access with WWW-Authenticate: Basic', async t => {

  const
    name     = 'sasdgaregqgads'
  , password = 'Bar'
  , headers  = authorize (name, password)
  , server   = (new Server (middleware)).serve ``

  , response = await fetch
      ('http://localhost:8181/', { headers } )


  t.equal
    (response.headers.get ('www-authenticate'), 'Basic')

  server.close ``
  t.end ()
})


test ('invalid password denies access with 401 status code', async t => {

  const
    name     = 'Foo'
  , password = 'dfgagarergwr'
  , headers  = authorize (name, password)
  , server   = (new Server (middleware)).serve ``

  , response = await fetch
      ('http://localhost:8181/', { headers } )


  t.equal (response.status, 401)

  server.close ``
  t.end ()
})


test ('invalid password denies access with WWW-Authenticate: Basic', async t => {

  const
    name     = 'Foo'
  , password = 'dfgagarergwr'
  , headers  = authorize (name, password)
  , server   = (new Server (middleware)).serve ``

  , response = await fetch
      ('http://localhost:8181/', { headers } )


  t.equal
    (response.headers.get ('www-authenticate'), 'Basic')

  server.close ``
  t.end ()
})


function authorize (name, password) {

  return { 'Authorization' : `Basic ${ encode (name, password) }` }
}


function encode (name, password) {
  const
    input = `${name}:${password}`

  , characters =
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="

  let
    i = 0
  , result = ''

  do {
      var a = input.charCodeAt(i++)
      var b = input.charCodeAt(i++)
      var c = input.charCodeAt(i++)

      a = a ? a : 0;
      b = b ? b : 0;
      c = c ? c : 0;

      var b1 = ( a >> 2 ) & 0x3F;
      var b2 = ( ( a & 0x3 ) << 4 ) | ( ( b >> 4 ) & 0xF );
      var b3 = ( ( b & 0xF ) << 2 ) | ( ( c >> 6 ) & 0x3 );
      var b4 = c & 0x3F;

      if( ! b ) {
          b3 = b4 = 64;
      } else if( ! c ) {
          b4 = 64;
      }

      result += characters.charAt( b1 ) + characters.charAt( b2 ) + characters.charAt( b3 ) + characters.charAt( b4 )

  } while ( i < input.length )

  return result
}
