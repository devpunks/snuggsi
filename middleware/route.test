const
  path = '/foo/'
, body = 'Shazam'
, URI  = `http://localhost:8181${path}`

, { test, fetch }
    = require ('test')

, { Server, Resource }
    = require ('..')

, { route }
    = require ('../middleware')

, middleware = context =>
    (context.body = body)


test ('URI without route', async t => {

  require ('fs').

  const
    stack =
      [ route (path, middleware) ]

  , server =
      (new Server (stack)).serve ``

  , response = await fetch (`${URI}adsfadsf`)


  t.equal (404, response.status)

  server.close ``
  t.end ()
})


test ('route URI', async t => {

  const
    stack =
      [ route (path, middleware) ]

  , server =
      (new Server (stack)).serve ``

  , response = await fetch (URI)


  t.equal (200, response.status)
  t.equal (body, await response.text ())

  server.close ``
  t.end ()
})


test ('route URI {token} parameters', async t => {

  const
    timestamp
      = (new Date).getTime ``
      + '' // convert to string

  , echo = context =>
      (context.body = context.params.timestamp)

  , stack =
      [ route (`${path}{timestamp}`, echo) ]

  , server =
      (new Server (stack)).serve ``

  , response = await fetch (`${URI}${timestamp}`)

    t.equal (200, response.status)
    t.equal (timestamp, await response.text ())

  server.close ``
  t.end ()
})


test.only ('decoding route URI encoded {token} parameters', async t => {

  const
    value   = '^ツ &,.*+()[]ståle32?$?'
  , encoded = encodeURIComponent (value)
  , decoded = decodeURIComponent (encoded)

  , echo = context =>
      (context.body = context.params.decoded)

  , stack =
      [ route (`${path}{decoded}`, echo) ]

  , server =
      (new Server (stack)).serve ``

  , response = await fetch (`${URI}${encoded}`)

    t.equal (value, await response.text ())
    t.equal (200, response.status)

  server.close ``
  t.end ()
})


test ('', async t => {

  const
    value   = 'index.txt'
  , encoded = encodeURIComponent (value)
  , decoded = decodeURIComponent (encoded)

  , echo = context =>
      (context.body = context.params.decoded)

  , stack =
      [ route (`${path}{decoded}`, echo) ]

  , server =
      (new Server (stack)).serve ``

  , response = await fetch (`${URI}${encoded}`)

    t.equal (value, await response.text ())
    t.equal (200, response.status)

  server.close ``
  t.end ()
})
