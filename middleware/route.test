const
  path = '/foo'
, body = 'Shazam'
, domain = `http://localhost:8181`
, URI  = `${domain}${path}`

, { test, fetch }
    = require ('test')

, { Server }
    = require ('..')

, { route }
    = require ('../middleware')

, middleware = context =>
    (context.body = body)


test ('URI without route', async t => {

  const
    path = Math
      .random()
      .toString(36)
      .replace(/[^a-z]/g, '')

  , stack =
      [ route (`${path}`, middleware) ]

  , server =
      (new Server (stack)).serve ``

  , response = await fetch (`${domain}/${path}`)


  t.equal (404, response.status)

  server.close ``
  t.end ()
})


test ('URI with route', async t => {

  const
    stack =
      [ route (path, middleware) ]

  , server =
      (new Server (stack)).serve ``

  , response = await fetch (URI)


  t.equal (200, response.status)
  t.equal (body, await response.text ())

  server.close ``
  t.end ()
})


test ('route URI segment {token} parameters', async t => {

  const
    date  = new Date
  , day   = date.getUTCDate ()
  , month = date.getUTCMonth ()
  , year  = date.getUTCFullYear ()
  , expected = (new Date (year, month, day)).toString ()

  , middleware = (context) => {
      const
        params = context.params
      , year   = params.year
      , month  = params.month
      , day    = params.day

      context.body = (new Date (year, month, day)).toString ()
    }

  , stack =
      [ route (`${path}/{year}/{month}/{day}`, middleware) ]

  , server =
      (new Server (stack)).serve ``

  , response =
      await fetch (`${URI}/${year}/${month}/${day}`)

    t.equal (200, response.status)
    t.equal (expected, await response.text ())

  server.close ``
  t.end ()
})


test ('route URI partial {token} parameters', async t => {

  const
    date  = new Date
  , day   = date.getUTCDate ()
  , month = date.getUTCMonth ()
  , year  = date.getUTCFullYear ()
  , expected = (new Date (year, month, day)).toString ()

  , middleware = (context) => {
      const
        params = context.params
      , year   = params.year
      , month  = params.month
      , day    = params.day

      context.body = (new Date (year, month, day)).toString ()
    }

  , stack =
      [ route (`${path}/{year}-{month}-{day}`, middleware) ]

  , server =
      (new Server (stack)).serve ``

  , response =
      await fetch (`${URI}/${year}-${month}-${day}`)

  t.equal (200, response.status)
  t.equal (expected, await response.text ())

  server.close ``
  t.end ()
})


test ('decoding route URI encoded {token} parameters', async t => {

  const
    value = '¯\_(ツ)_/¯ ^&,.*+(|)[]å32$?'
  , encoded = encodeURIComponent (value)
  , decoded = decodeURIComponent (encoded)

  , echo = context =>
      (context.body = context.params.decoded)

  , stack =
      [ route (`${path}{decoded}`, echo) ]

  , server =
      (new Server (stack)).serve ``

  , response = await fetch (`${URI}${encoded}`)

    t.equal (200, response.status)
    t.equal (value, await response.text ())

  server.close ``
  t.end ()
})


test ('surrogate subresource identity suffix after path', async t => {

  const
    id   = 'abc123'
  , echo = (context, id) =>
      (context.body = id)

  , stack =
      [ route (( path + `/` ), echo ) ]

  , server =
      (new Server (stack)).serve ``

  , response = await fetch (`${URI}/${id}`)

    t.equal (200, response.status)
    t.equal (id, await response.text ())

  server.close ``
  t.end ()
})


test ('surrogate subresource identity invalid `/` character', async t => {

  const
    id   = 'abc/123'
  , echo = (context, id) =>
      (context.body = id)

  , stack =
      [ route (( path + `/` ), echo ) ]

  , server =
      (new Server (stack)).serve ``

  , response = await fetch (`${URI}/${id}`)

    t.equal (404, response.status)

  server.close ``
  t.end ()
})
