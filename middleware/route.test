const
  path = '/foo/'
, URL  = `http://localhost:8181${path}`

, { test, read, fetch }
    = require ('test')

, { Server, Resource }
    = require ('..')

, route = resource =>
    require ('../middleware')
    .route  ( `${path}{id}`, resource )

, body = 'Shazam'

, middleware
    = context =>
    !!! (console.log ('WTF', context)) &&
      (context.body = body)
        && (context.status = 200)


test.only ('route URI to middleware', async t => {

  const
    stack
      = [ route (middleware) ]

  , server
      = (new Server (stack))
      .serve ``

  , response
      = await fetch (`${URL}14`)

  , { status} = response


  t.equal (200, status)
  t.equal (body, await response.text ())

  server.close ``
  t.end ()
})


test ('route URI with {token} to middleware', async t => {

  const
    token = '{timestamp}'
  , path  = `${uri}${token}`
  , timestamp = (new Date)
      .getTime `` + '' // convert to string

  , echo = context =>
      t.equal (timestamp, context.params.timestamp)

  , stack =
      [ route (path, echo) ]

 ,  server
      = (new Server (stack))
      .serve ``

  , response
      = await fetch (`http://localhost:8181${uri}${timestamp}`)

  , status = response.status

  server.close ``
  t.end ()
})


test ('route URI with encoded {token} to middleware', async t => {

  const
    token = '{encoded}'
    value = 'Foo name+stÃ¥le'
  , path  = `${uri}${token}`

  , [ decode, encode ]
      = [decodeURIComponent, encodeURIComponent]

  , echo = context =>
      t.equal (value, context.params.encoded)

  , stack =
      [ route (path, echo) ]

 ,  server
      = (new Server (stack))
      .serve ``

  , response = await fetch
      (`http://localhost:8181${uri}${ encode (value) }`)

  , status = response.status

  server.close ``
  t.end ()
})


test ('URI without route', async t => {

  const
    stack
      = [ route (uri, middleware) ]

  , server
      = (new Server (stack))
      .serve ``

  , response
      = await fetch ('http://localhost:8181/adsfadsf/')

  , status = response.status


  t.equal (404, status)

  server.close ``
  t.end ()
})
